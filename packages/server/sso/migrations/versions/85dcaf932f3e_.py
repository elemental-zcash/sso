"""empty message

Revision ID: 85dcaf932f3e
Revises: 
Create Date: 2023-03-15 01:02:33.647771

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '85dcaf932f3e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('result_all', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('result_no_stop_words', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('oauth_authorization_codes')
    op.drop_table('oauth_scopes')
    op.drop_table('oauth_tokens')
    op.drop_table('oauth_clients')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('totp', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('unverified_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_verified_email', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('email_confirmation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('socials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zcashaddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unverified_zcashaddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('zcashaddress_confirmation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('public_zcashaddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('password_reset', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('joined_on', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('roles', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('pswd', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('public_id', name='users_public_id_key'),
    sa.UniqueConstraint('username', name='users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('oauth_clients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('oauth_clients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('client_secret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('grants', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('redirect_uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token_lifetime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('authorization_code_lifetime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='oauth_clients_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('oauth_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('access_token_expires_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token_expires_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('scopes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='oauth_tokens_client_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='oauth_tokens_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='oauth_tokens_pkey')
    )
    op.create_table('oauth_scopes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='oauth_scopes_pkey'),
    sa.UniqueConstraint('scope', name='oauth_scopes_scope_key')
    )
    op.create_table('oauth_authorization_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('authorization_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('redirect_uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scopes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['oauth_clients.id'], name='oauth_authorization_codes_client_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='oauth_authorization_codes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='oauth_authorization_codes_pkey')
    )
    op.drop_table('results')
    # ### end Alembic commands ###
